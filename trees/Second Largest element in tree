Given a generic tree, find and return the node with second largest value in given tree.
Note: Return NULL if no node with required value is present.

/************************************************************

    Following is the structure for the TreeNode class

    template <typename T>
    class TreeNode {
     public:
        T data;
        vector<TreeNode<T>*> children;

        TreeNode(T data) {
            this->data = data;
        }

        ~TreeNode() {
            for (int i = 0; i < children.size(); i++) {
                delete children[i];
            }
        }
    };

************************************************************/

void helper(TreeNode<int>* root,TreeNode<int> **first,TreeNode<int> **second){
    if(root==NULL){
        return;
    }
    if(!(*first)){
        *first=root;
    }
    else if(root->data>(*first)->data){
        *second=*first;
        *first = root;
    }
    else if(!(*second) || root->data>(*second)->data){
        *second = root;
    }
    for(int i=0;i<root->children.size();i++){
        helper(root->children[i],first,second);
    }
}



TreeNode<int>* getSecondLargestNode(TreeNode<int>* root) {
   TreeNode<int>* first = NULL;
    TreeNode<int>* second = NULL;
    helper(root,&first,&second);
    if(second==NULL){
        return NULL;
    }
    if(first->data==second->data){
        return NULL;
    }
    return second;
    
    
    
    
    
}
